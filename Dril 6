#include "std_lib_facilities.h"
#define print 'q'

const char quit = 'x';
const char number = '8';
const char prompt = '>';
const char result = '=';

double expression();

class Token {
public:
	char kind;
	double value;
	Token(char ch) : kind(ch), value(0) {}
	Token(char ch, double val) : kind(ch), value(val) {}
};

class Token_stream {
public:
	Token_stream();
	Token get();
	void putback(Token t);
	void ignore(char c);
private:
	bool full;
	Token buffer;
};

Token_stream::Token_stream() : full(false), buffer(0) {}

void Token_stream::putback(Token t)
{
	if (full) error("Token_stream buffer full");
	buffer = t;
	full = true;
};

Token Token_stream::get()
{
	if (full)
	{
		full = false;
		return buffer;
	}

	char ch;
	cin >> ch;

	switch (ch) {
	case '=': case 'q':
	case '(': case ')':
	case '+': case '-':
	case '*': case '/':
	case '%': case ';':
	case 'x':
		return Token(ch);
	case '.':
	case '0': case '1':
	case '2': case '3':
	case '4': case '5':
	case '6': case '7':
	case '8': case '9':

	{
		cin.putback(ch);
		double val = 0;
		cin >> val;
		return Token('8', val);
	}
	default:
		error("Invalid token");
		return 0;
	}
}

void Token_stream::ignore(char c)
{
	if (full && buffer.kind == c)
	{
		full = false;
		return;
	}
	full = false;
	char ch = 0;
	while (ch >> ch)
	{
		if (ch == c)
		{
			return;
		}
	}
}

Token_stream ts;

double expression();
double term();
double primary();

double primary()
{
	Token t = ts.get();
	switch (t.kind)
	{
	case '(':
	{
		double d = expression();
		t = ts.get();
		if (t.kind != ')') error("')' expected");
		return d;
	}
	case number:
		return t.value;
	default:
		error("primary expected");
		return 0;
	}
};

double term()
{
	double left = primary();
	Token t = ts.get();
	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		/*
		case '%':
			left %= primary();
			t = get_token();
			break;
			*/
		default:
			ts.putback(t);
			return left;
		}
	}
};

double expression()
{
	double left = term();
	Token t = ts.get();
	while (true) {
		switch (t.kind) {
		case '+':
			left += term();
			t = ts.get();
			break;
		case '-':
			left -= term();
			t = ts.get();
			break;
		default:
			ts.putback(t);
			return left;
		}
	}
}

void clean_up_mess()
{
	ts.ignore(print);
}

double statement()
{
	Token t = ts.get();
	switch (t.kind)
	{
		//case let:
	default:
		ts.putback(t);
		return expression();
	}
}

void calculate() {

	double val = 0;

	while (cin)
	{
		try {
			cout << prompt << " ";
			Token t = ts.get();
			while (t.kind == print)
			{
				ts.get();
			}
			if (t.kind == quit)
			{
				return;
			}
			ts.putback(t);
			cout << result << statement() << endl;
		}
		catch (exception& e)
		{
			cerr << e.what() << endl;
			clean_up_mess();
		}
	}
}

int main()
{
	try {
		cout << "Welcome to our simple calculator." << endl;
		cout << "Please enter expressions using floating-point numbers." << endl;
		cout << "You can multiply, divide, substract and add." << endl;
		cout << "End your calculation with 'x' to quit and '=' to print." << endl;

		calculate();
		return 0;
	}
	catch (exception& e) {
		cerr << e.what() << endl;
		return 1;
	}
	catch (...) {
		cerr << "Some errors!" << endl;
		return 2;
	}
}
